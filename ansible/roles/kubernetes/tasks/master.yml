---
- name: create an empty file for Kubeadm configuring
  copy:
    content: ""
    dest: /etc/kubernetes/kubeadm-config.yaml
    force: no

- name: configuring the container runtime including its cgroup driver
  blockinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    block: |
         kind: ClusterConfiguration
         apiVersion: kubeadm.k8s.io/v1beta3
         networking:
           podSubnet: "10.244.0.0/16"
         ---
         kind: KubeletConfiguration
         apiVersion: kubelet.config.k8s.io/v1beta1
         runtimeRequestTimeout: "15m"
         cgroupDriver: "systemd"
         systemReserved:
           cpu: 100m
           memory: 350M
         kubeReserved:
           cpu: 100m
           memory: 50M
         enforceNodeAllocatable:
         - pods
         ---
         kind: InitConfiguration
         apiVersion: kubeadm.k8s.io/v1beta3
         nodeRegistration:
           criSocket: "unix:///run/containerd/containerd.sock"

- name: Reset any existing kubeadm state
  shell: kubeadm reset -f
  ignore_errors: yes

- name: initialize the cluster (this could take some time)
  shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml
  register: kubeadm_init
  changed_when: true

- name: Wait for admin.conf to be created
  wait_for:
    path: /etc/kubernetes/admin.conf
    state: present
    timeout: 300
  register: wait_for_admin_conf

- name: create .kube directory
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: 0755

- name: copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
  when: wait_for_admin_conf is success

- name: install Pod network
  shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  args:
    chdir: "{{ ansible_env.HOME }}"
  when: wait_for_admin_conf is success
