---
- name: Reset Kubernetes if previously installed (Master only)
  block:
    - name: Stop kubelet service
      systemd:
        name: kubelet
        state: stopped
      when: inventory_hostname in groups['master']

    - name: Reset kubeadm
      command: kubeadm reset -f
      when: inventory_hostname in groups['master']
      ignore_errors: yes

    - name: Remove Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: absent
        purge: yes
      when: inventory_hostname in groups['master']

    - name: Remove Kubernetes directories
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - /var/lib/cni
        - /opt/cni
        - /var/run/kubernetes
      when: inventory_hostname in groups['master']

    - name: Remove Kubernetes configuration
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: absent
      when: inventory_hostname in groups['master']

    - name: Clean up iptables
      command: iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
      when: inventory_hostname in groups['master']
      ignore_errors: yes

    - name: Kill any remaining processes using Kubernetes ports
      shell: |
        for port in 10250 10257 10259; do
          pid=$(lsof -ti:$port)
          if [ ! -z "$pid" ]; then
            kill -9 $pid
          fi
        done
      when: inventory_hostname in groups['master']
      ignore_errors: yes
  when: inventory_hostname in groups['master']

- name: Install containerd
  apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate containerd default config
  command: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Update containerd config for systemd cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Create containerd service directory
  file:
    path: /etc/systemd/system/containerd.service.d
    state: directory
    mode: '0755'

- name: Create containerd service override
  copy:
    content: |
      [Service]
      ExecStartPre=
    dest: /etc/systemd/system/containerd.service.d/override.conf
    mode: '0644'

- name: Reload systemd
  systemd:
    daemon_reload: yes

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
    state: present
    filename: kubernetes

- name: Create directory for Kubernetes apt key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes apt key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '0644'

- name: Install Kubernetes components
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Configure kubelet to use systemd cgroup driver
  copy:
    content: |
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
    dest: /var/lib/kubelet/config.yaml
    mode: '0644'

- name: Ensure kubelet service is stopped
  systemd:
    name: kubelet
    state: stopped
  when: inventory_hostname in groups['master']

- name: Pull required images before initialization
  command: kubeadm config images pull
  when: inventory_hostname in groups['master']
  register: image_pull
  retries: 3
  delay: 10
  until: image_pull is success

- name: Initialize Kubernetes cluster (Master only)
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all
  when: inventory_hostname in groups['master']
  register: kubeadm_init
  retries: 3
  delay: 30
  until: kubeadm_init is success
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Start and enable kubelet service
  systemd:
    name: kubelet
    state: started
    enabled: yes
  when: inventory_hostname in groups['master']

- name: Wait for kubelet to be ready
  wait_for:
    path: /var/run/kubernetes/admin.sock
    state: present
    timeout: 300
  when: inventory_hostname in groups['master']

- name: Create .kube directory
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'
  when: inventory_hostname in groups['master']

- name: Copy kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    mode: '0644'
  when: inventory_hostname in groups['master']

- name: Get join command
  command: kubeadm token create --print-join-command
  register: join_command
  when: inventory_hostname in groups['master']
  retries: 3
  delay: 10
  until: join_command is success

- name: Set join command fact
  set_fact:
    k8s_join_command: "{{ join_command.stdout }}"
  when: inventory_hostname in groups['master']

- name: Join worker nodes
  command: "{{ hostvars[groups['master'][0]]['k8s_join_command'] }}"
  when: inventory_hostname in groups['worker']
  retries: 3
  delay: 10
  until: result is success 